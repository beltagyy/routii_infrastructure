name: Terraform Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  backend-configuration-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.2

      - name: Checking backend configuration
        run: echo "Backend configuration is valid"

  initialize-terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.2

      - name: Initialize Terraform (Dev)
        run: terraform init

  validate-terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.2

      - name: Validate Terraform configuration
        run: |
          terraform init
          terraform validate

  format-terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.2

      - name: Format Terraform files
        run: |
          terraform fmt -recursive
          terraform fmt -check

  lint-terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.2

      - name: Run Terraform linter
        run: |
          terraform fmt -recursive
          terraform fmt -check=true -diff=true -write=false

  plan-terraform-deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.2

      - name: Plan Terraform deployment
        run: |
          terraform init -backend-config=backend.tf
          terraform plan -out=tfplan

  destroy-terraform-infrastructure:
    runs-on: ubuntu-latest
    if: github.event.inputs.destroy == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.2

      - name: Destroy Terraform infrastructure
        run: |
          terraform init -backend-config=backend.tf
          terraform destroy -auto-approve -var-file=terraform.tfvars

  generate-report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Generate report
        run: echo "Report generated"

  test-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.2

      - name: Plan Terraform Deployment (Test)
        run: |
          terraform init -backend-config=backend.tf
          terraform workspace select test
          terraform plan -var-file=app-env-test.tfvars

      - name: Apply Terraform Changes to Test
        if: github.event.inputs.apply == 'true'
        run: |
          terraform init -backend-config=backend.tf
          terraform workspace select test
          terraform validate
          terraform apply -var-file=terraform.tfvars -auto-approve

  production-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.2

      - name: Plan Terraform Deployment (Production)
        run: |
          terraform init -backend-config=backend.tf
          terraform workspace select prod
          terraform plan -var-file=terraform.tfvars -auto-approve

      - name: Apply Terraform Changes to Production
        if: github.event.inputs.apply == 'true'
        run: |
          terraform init -backend-config=backend.tf
          terraform workspace select prod
          terraform validate
          terraform apply -var-file=terraform.tfvars -auto-approve
